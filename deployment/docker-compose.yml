version: '3.8'

# This is the complete Docker Compose file for deploying the Restaurant-CRM stack to Docker Swarm.
# It is designed to be run from within the 'deployment' directory.

services:

  #--------------------------------#
  #--- REVERSE PROXY (INGRESS)  ---#
  #--------------------------------#
  nginx:
    image: my-registry/nginx-proxy:latest # Your custom Nginx image
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    networks:
      - app-net
    secrets:
      - source: ssl_cert
        target: /etc/letsencrypt/live/sparkdevop.com/fullchain.pem
      - source: ssl_key
        target: /etc/letsencrypt/live/sparkdevop.com/privkey.pem
    deploy:
      mode: global
      restart_policy:
        condition: on-failure

  #-----------------------------#
  #--- USER-FACING SERVICES  ---#
  #-----------------------------#
  api-gateway:
    image: my-registry/api-gateway:latest # Your built API Gateway image
    # The .env file is located at ../backend/.env relative to this compose file
    env_file:
      - ../backend/.env
    networks:
      - app-net
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.labels.role == gateway-host
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s

  frontend-shell:
    image: my-registry/shell-app-angular:latest # Your built Angular shell image
    networks:
      - app-net
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.labels.role == gateway-host
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s

  #--------------------------#
  #--- BACKEND SERVICES   ---#
  #--------------------------#
  user-service:
    image: my-registry/user-service:latest
    env_file:
      - ../backend/.env
    networks:
      - app-net
    depends_on:
      - postgres
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure

  order-service:
    image: my-registry/order-service:latest
    env_file:
      - ../backend/.env
    networks:
      - app-net
    depends_on:
      - postgres
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure

  reporting-service:
    image: my-registry/reporting-service:latest
    env_file:
      - ../backend/.env
    networks:
      - app-net
    depends_on:
      - postgres
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  #--------------------------#
  #--- DATA STORES        ---#
  #--------------------------#
  postgres:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-net
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure

  redis:
    image: redis:7-alpine
    networks:
      - app-net
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure

#--------------------------#
#--- TOP-LEVEL KEYS     ---#
#--------------------------#
networks:
  app-net:
    driver: overlay
    attachable: true

volumes:
  postgres-data:

secrets:
  ssl_cert:
    external: true
  ssl_key:
    external: true