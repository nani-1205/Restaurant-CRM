version: '3.8'

# This file orchestrates the entire Restaurant CRM application stack for Docker Swarm.
# It defines all services, networks, volumes, and deployment strategies.

services:

  #--------------------------------#
  #--- REVERSE PROXY (INGRESS)  ---#
  #--------------------------------#
  nginx:
    image: my-registry/nginx-proxy:latest # Your custom Nginx image with the config file
    ports:
      # Expose HTTP and HTTPS ports to the host network
      # This is the single entry point for all external traffic.
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    networks:
      - app-net
    secrets:
      # Securely mounts the SSL certificates from Docker Swarm secrets
      - source: ssl_cert # Name of the secret on the Swarm manager
        target: /etc/letsencrypt/live/sparkdevop.com/fullchain.pem # Path inside the container
      - source: ssl_key
        target: /etc/letsencrypt/live/sparkdevop.com/privkey.pem
    deploy:
      mode: global # Ensures one Nginx instance runs on every node for high availability
      restart_policy:
        condition: on-failure

  #-----------------------------#
  #--- USER-FACING SERVICES  ---#
  #-----------------------------#
  api-gateway:
    image: my-registry/api-gateway:latest # Your built API Gateway image
    env_file:
      - ../backend/.env# Loads environment variables for service URLs
    networks:
      - app-net
    deploy:
      replicas: 2 # Run two instances for availability and load balancing
      placement:
        constraints:
          - node.labels.role == gateway-host # Constrain to specific nodes as requested
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s

  frontend-shell:
    image: my-registry/shell-app-angular:latest # Your built Angular shell image
    networks:
      - app-net
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.labels.role == gateway-host # Constrain to specific nodes
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s

  #--------------------------#
  #--- BACKEND SERVICES   ---#
  #--------------------------#
  user-service:
    image: my-registry/user-service:latest
    env_file:
      - ./backend/.env
    networks:
      - app-net
    depends_on:
      - postgres
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s

  order-service:
    image: my-registry/order-service:latest
    env_file:
      - ./backend/.env
    networks:
      - app-net
    depends_on:
      - postgres
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s

  reporting-service:
    image: my-registry/reporting-service:latest
    env_file:
      - ./backend/.env
    networks:
      - app-net
    depends_on:
      - postgres
    deploy:
      replicas: 1 # Reporting might not need as many replicas initially
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s

  #--------------------------#
  #--- DATA STORES        ---#
  #--------------------------#
  postgres:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-supersecret}
      POSTGRES_DB: ${POSTGRES_DB:-restaurant_db}
    volumes:
      - postgres-data:/var/lib/postgresql/data # Persist database data
    networks:
      - app-net
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager # Place the DB on a manager node for stability
      restart_policy:
        condition: on-failure

  redis:
    image: redis:7-alpine
    networks:
      - app-net
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure

#--------------------------#
#--- TOP-LEVEL KEYS     ---#
#--------------------------#
networks:
  app-net:
    driver: overlay # Overlay network is required for Swarm mode communication across nodes
    attachable: true

volumes:
  postgres-data: # Defines the named volume for PostgreSQL data

secrets:
  # Declares that we are using pre-existing secrets from the Docker Swarm manager
  ssl_cert:
    external: true
  ssl_key:
    external: true