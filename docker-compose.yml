# Filename: docker-compose.yml
version: '3.8'

services:
  # -------------------------------------------
  # REVERSE PROXY & LOAD BALANCER
  # -------------------------------------------
  nginx:
    # We build our custom nginx config
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Mount your SSL certs from the host machine into the container
      # You must obtain these certs for your domain 'sparkdevop.com'
      - /path/to/your/certs/fullchain.pem:/etc/nginx/ssl/fullchain.pem:ro
      - /path/to/your/certs/privkey.pem:/etc/nginx/ssl/privkey.pem:ro
    networks:
      - app-net
    deploy:
      mode: global
      placement:
        constraints: [node.role == manager]

  # -------------------------------------------
  # DATABASES & CACHING
  # -------------------------------------------
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-net
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure

  redis:
    image: redis:7-alpine
    networks:
      - app-net
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure

  # -------------------------------------------
  # BACKEND MICROSERVICES
  # -------------------------------------------
  api-gateway:
    image: your-repo/api-gateway:latest # IMPORTANT: Replace with your actual image
    networks:
      - app-net
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure

  orders-service:
    image: your-repo/orders-service:latest # IMPORTANT: Replace with your actual image
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
    networks:
      - app-net
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure

  # --- Add other backend services (users, analytics) here following the same pattern ---

  # -------------------------------------------
  # MICRO-FRONTENDS
  # -------------------------------------------
  container-app:
    image: your-repo/container-app:latest # IMPORTANT: Replace with your actual image
    networks:
      - app-net
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.labels.hostname == master-1
          - node.labels.hostname == master-2

  pos-mfe:
    image: your-repo/pos-mfe:latest # IMPORTANT: Replace with your actual image
    networks:
      - app-net
    deploy:
      replicas: 2

  dashboard-mfe:
    image: your-repo/dashboard-mfe:latest # IMPORTANT: Replace with your actual image
    networks:
      - app-net
    deploy:
      replicas: 2

  employees-mfe:
    image: your-repo/employees-mfe:latest # IMPORTANT: Replace with your actual image
    networks:
      - app-net
    deploy:
      replicas: 2

# Define shared resources
volumes:
  postgres-data:
    driver: local

networks:
  app-net:
    driver: overlay
    attachable: true